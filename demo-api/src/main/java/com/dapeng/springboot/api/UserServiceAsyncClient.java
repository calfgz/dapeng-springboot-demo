package com.dapeng.springboot.api;

      import com.github.dapeng.core.*;
      import com.github.dapeng.org.apache.thrift.*;
      import java.util.concurrent.CompletableFuture;
      import java.util.concurrent.Future;
      import java.util.ServiceLoader;
      import com.dapeng.springboot.api.UserServiceAsyncCodec.*;
      import com.dapeng.springboot.api.UserServiceSuperCodec.*;
      import com.dapeng.springboot.api.service.UserServiceAsync;

      /**
       * Autogenerated by Dapeng-Code-Generator (2.2.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

      **/
      public class UserServiceAsyncClient implements UserServiceAsync{
      private final String serviceName;
      private final String version;

      private SoaConnectionPool pool;
      private final SoaConnectionPool.ClientInfo clientInfo;

      public UserServiceAsyncClient() {
        this.serviceName = "com.dapeng.springboot.api.service.UserService";
        this.version = "1.0.0";

        ServiceLoader<SoaConnectionPoolFactory> factories = ServiceLoader.load(SoaConnectionPoolFactory.class,getClass().getClassLoader());
        this.pool = factories.iterator().next().getPool();
        this.clientInfo = this.pool.registerClientInfo(serviceName,version);
      }

      public UserServiceAsyncClient(String serviceVersion) {
        this.serviceName = "com.dapeng.springboot.api.service.UserService";
        this.version = serviceVersion;

        ServiceLoader<SoaConnectionPoolFactory> factories = ServiceLoader.load(SoaConnectionPoolFactory.class,getClass().getClassLoader());
        this.pool = factories.iterator().next().getPool();
        this.clientInfo = this.pool.registerClientInfo(serviceName,version);
      }

      
          
            /**
            * 
            **/
            
              public CompletableFuture<String> sayHello(String name) throws SoaException{

              String methodName = "sayHello";
              sayHello_args sayHello_args = new sayHello_args();
              sayHello_args.setName(name);
                

              CompletableFuture<sayHello_result> response = (CompletableFuture<sayHello_result>) pool.sendAsync(serviceName,version,"sayHello",sayHello_args, new SayHello_argsSerializer(), new SayHello_resultSerializer());

              
                  
                      return response.thenApply((sayHello_result result )->  result.getSuccess());
                    
                
            }
            
          

        
          
            /**
            * 
            **/
            
              public CompletableFuture<com.dapeng.springboot.api.domain.User> getUser(String id) throws SoaException{

              String methodName = "getUser";
              getUser_args getUser_args = new getUser_args();
              getUser_args.setId(id);
                

              CompletableFuture<getUser_result> response = (CompletableFuture<getUser_result>) pool.sendAsync(serviceName,version,"getUser",getUser_args, new GetUser_argsSerializer(), new GetUser_resultSerializer());

              
                  
                      return response.thenApply((getUser_result result )->  result.getSuccess());
                    
                
            }
            
          

        

      /**
      * getServiceMetadata
      **/
      public String getServiceMetadata() throws SoaException {
        String methodName = "getServiceMetadata";
        getServiceMetadata_args getServiceMetadata_args = new getServiceMetadata_args();
        getServiceMetadata_result response = pool.send(serviceName,version,methodName,getServiceMetadata_args, new GetServiceMetadata_argsSerializer(), new GetServiceMetadata_resultSerializer());
        return response.getSuccess();
      }

      /**
      * echo
      **/
      public String echo() throws SoaException {
        String methodName = "echo";
        echo_args echo_args = new echo_args();
        echo_result response = pool.send(serviceName,version,methodName,echo_args, new echo_argsSerializer(), new echo_resultSerializer());
        return response.getSuccess();
      }
    }
    